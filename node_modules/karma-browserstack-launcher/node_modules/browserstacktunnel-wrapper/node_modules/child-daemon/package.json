{
  "name": "child-daemon",
  "description": "Start and stop child daemon processes without cutting them loose",
  "version": "0.0.2",
  "homepage": "https://github.com/pghalliday/node-ChildDaemon.git",
  "author": {
    "name": "Peter Halliday",
    "email": "pghalliday@gmail.com",
    "url": "http://stuffpetedoes.blogspot.nl/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pghalliday/node-ChildDaemon.git"
  },
  "bugs": {
    "url": "https://github.com/pghalliday/node-ChildDaemon/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pghalliday/node-ChildDaemon/blob/master/LICENSE-MIT"
    }
  ],
  "main": "src/ChildDaemon.js",
  "engines": {
    "node": ">= 0.8.12"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "pty.js": "~0.2.2"
  },
  "optionalDependencies": {
    "pty.js": "~0.2.2"
  },
  "devDependencies": {
    "grunt": "0.3.17",
    "expect.js": "0.2.0",
    "grunt-mocha-test": "0.0.1"
  },
  "keywords": [
    "daemon",
    "spawn",
    "child_process",
    "pty"
  ],
  "readme": "node-ChildDaemon\n=========\n\nStart and stop child daemon processes without cutting them loose\n\n## Features\n\n- should start and stop child daemon processes\n- should error if an invalid child is specified\n- should error if stopped before started\n- should error if started when already running\n- should work with processes that buffer output when there is no tty\n- should support windows and *nix systems\n\n## Installation\n\n```\nnpm install child-daemon\n```\n\n## API\n\n```javascript\nvar ChildDaemon = require('child-daemon');\n\nvar childDaemon = new ChildDaemon(\n  command, // command\n  args, // argument array\n  new RegExp(regexString) // regular expression which when matched to ouput from stdout or stderr will indicate that the daemon has started and is ready \n);\n\nchildDaemon.start(function(error, matched) {\n  if (error) {\n    // Daemon failed to start, or exited before the regular expression was matched\n    console.log(error);\n  } else {\n    // Daemon started, the matched parameter will be the returned array from the matched regular expression\n\n    childDaemon.stop(function(error) {\n      if (error) {\n        // Daemon failed to stop (perhaps the daemon is no longer running)\n        console.log(error)\n      } else {\n        // Daemon was stopped\n      }\n    });\n  }\n});\n```\n\n## Roadmap\n\n- nothing yet\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using ``./grunt.sh`` or ``.\\grunt.bat``.\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.",
  "readmeFilename": "README.md",
  "_id": "child-daemon@0.0.2",
  "_from": "child-daemon@~0.0.2"
}
